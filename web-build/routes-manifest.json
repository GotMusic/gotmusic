{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [
      {
        "source": "/(shop)",
        "destination": "/shop",
        "regex": "^(?:/(shop))(?:/)?$"
      },
      {
        "source": "/(shop)/(.*)",
        "destination": "/shop/$1",
        "regex": "^(?:/(shop))(?:/(.*))(?:/)?$"
      },
      {
        "source": "/(studio)",
        "destination": "/studio",
        "regex": "^(?:/(studio))(?:/)?$"
      },
      {
        "source": "/(studio)/(.*)",
        "destination": "/studio/$1",
        "regex": "^(?:/(studio))(?:/(.*))(?:/)?$"
      },
      {
        "source": "/(admin)",
        "destination": "/admin",
        "regex": "^(?:/(admin))(?:/)?$"
      },
      {
        "source": "/(admin)/(.*)",
        "destination": "/admin/$1",
        "regex": "^(?:/(admin))(?:/(.*))(?:/)?$"
      }
    ],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/admin/assets/[id]",
      "regex": "^/admin/assets/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/admin/assets/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/assets/[id]",
      "regex": "^/api/assets/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/assets/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/assets/[id]/audit",
      "regex": "^/api/assets/([^/]+?)/audit(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/assets/(?<nxtPid>[^/]+?)/audit(?:/)?$"
    },
    {
      "page": "/api/assets/[id]/download",
      "regex": "^/api/assets/([^/]+?)/download(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/assets/(?<nxtPid>[^/]+?)/download(?:/)?$"
    },
    {
      "page": "/asset/[id]",
      "regex": "^/asset/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/asset/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/admin/uploads",
      "regex": "^/admin/uploads(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/uploads(?:/)?$"
    },
    {
      "page": "/catalog",
      "regex": "^/catalog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/catalog(?:/)?$"
    },
    {
      "page": "/docs",
      "regex": "^/docs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/docs(?:/)?$"
    },
    {
      "page": "/shop",
      "regex": "^/shop(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/shop(?:/)?$"
    },
    {
      "page": "/studio",
      "regex": "^/studio(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/studio(?:/)?$"
    },
    {
      "page": "/studio/assets",
      "regex": "^/studio/assets(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/studio/assets(?:/)?$"
    },
    {
      "page": "/studio/sales",
      "regex": "^/studio/sales(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/studio/sales(?:/)?$"
    },
    {
      "page": "/studio/uploads",
      "regex": "^/studio/uploads(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/studio/uploads(?:/)?$"
    },
    {
      "page": "/studio-test",
      "regex": "^/studio\\-test(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/studio\\-test(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}